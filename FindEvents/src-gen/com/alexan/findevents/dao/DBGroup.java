package com.alexan.findevents.dao;

import java.util.List;
import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBGROUP.
 */
public class DBGroup {

    private Long id;
    private Long userID;
    private String groupname;
    private Integer groupcapacity;
    private Long timestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBGroupDao myDao;

    private List<DBGroupFriend> thefriends;

    public DBGroup() {
    }

    public DBGroup(Long id) {
        this.id = id;
    }

    public DBGroup(Long id, Long userID, String groupname, Integer groupcapacity, Long timestamp) {
        this.id = id;
        this.userID = userID;
        this.groupname = groupname;
        this.groupcapacity = groupcapacity;
        this.timestamp = timestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBGroupDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUserID() {
        return userID;
    }

    public void setUserID(Long userID) {
        this.userID = userID;
    }

    public String getGroupname() {
        return groupname;
    }

    public void setGroupname(String groupname) {
        this.groupname = groupname;
    }

    public Integer getGroupcapacity() {
        return groupcapacity;
    }

    public void setGroupcapacity(Integer groupcapacity) {
        this.groupcapacity = groupcapacity;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBGroupFriend> getThefriends() {
        if (thefriends == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBGroupFriendDao targetDao = daoSession.getDBGroupFriendDao();
            List<DBGroupFriend> thefriendsNew = targetDao._queryDBGroup_Thefriends(id);
            synchronized (this) {
                if(thefriends == null) {
                    thefriends = thefriendsNew;
                }
            }
        }
        return thefriends;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetThefriends() {
        thefriends = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
