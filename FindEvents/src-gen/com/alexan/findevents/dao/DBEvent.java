package com.alexan.findevents.dao;

import java.util.List;
import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBEVENT.
 */
public class DBEvent {

    private Long id;
    private Long userID;
    private Long locationID;
    private String title;
    private String description;
    private String address;
    private String province;
    private String city;
    private String district;
    private String addressdetail;
    private String startt;
    private String endt;
    private String startd;
    private String endd;
    private Integer collectionNum;
    private Integer attendNum;
    private Integer commentNum;
    private Long timestamp;
    private Long visibility;
    private Long starttime;
    private Long endtime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBEventDao myDao;

    private List<DBEventCategory> categories;

    public DBEvent() {
    }

    public DBEvent(Long id) {
        this.id = id;
    }

    public DBEvent(Long id, Long userID, Long locationID, String title, String description, String address, String province, String city, String district, String addressdetail, String startt, String endt, String startd, String endd, Integer collectionNum, Integer attendNum, Integer commentNum, Long timestamp, Long visibility, Long starttime, Long endtime) {
        this.id = id;
        this.userID = userID;
        this.locationID = locationID;
        this.title = title;
        this.description = description;
        this.address = address;
        this.province = province;
        this.city = city;
        this.district = district;
        this.addressdetail = addressdetail;
        this.startt = startt;
        this.endt = endt;
        this.startd = startd;
        this.endd = endd;
        this.collectionNum = collectionNum;
        this.attendNum = attendNum;
        this.commentNum = commentNum;
        this.timestamp = timestamp;
        this.visibility = visibility;
        this.starttime = starttime;
        this.endtime = endtime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBEventDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUserID() {
        return userID;
    }

    public void setUserID(Long userID) {
        this.userID = userID;
    }

    public Long getLocationID() {
        return locationID;
    }

    public void setLocationID(Long locationID) {
        this.locationID = locationID;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getProvince() {
        return province;
    }

    public void setProvince(String province) {
        this.province = province;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getDistrict() {
        return district;
    }

    public void setDistrict(String district) {
        this.district = district;
    }

    public String getAddressdetail() {
        return addressdetail;
    }

    public void setAddressdetail(String addressdetail) {
        this.addressdetail = addressdetail;
    }

    public String getStartt() {
        return startt;
    }

    public void setStartt(String startt) {
        this.startt = startt;
    }

    public String getEndt() {
        return endt;
    }

    public void setEndt(String endt) {
        this.endt = endt;
    }

    public String getStartd() {
        return startd;
    }

    public void setStartd(String startd) {
        this.startd = startd;
    }

    public String getEndd() {
        return endd;
    }

    public void setEndd(String endd) {
        this.endd = endd;
    }

    public Integer getCollectionNum() {
        return collectionNum;
    }

    public void setCollectionNum(Integer collectionNum) {
        this.collectionNum = collectionNum;
    }

    public Integer getAttendNum() {
        return attendNum;
    }

    public void setAttendNum(Integer attendNum) {
        this.attendNum = attendNum;
    }

    public Integer getCommentNum() {
        return commentNum;
    }

    public void setCommentNum(Integer commentNum) {
        this.commentNum = commentNum;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public Long getVisibility() {
        return visibility;
    }

    public void setVisibility(Long visibility) {
        this.visibility = visibility;
    }

    public Long getStarttime() {
        return starttime;
    }

    public void setStarttime(Long starttime) {
        this.starttime = starttime;
    }

    public Long getEndtime() {
        return endtime;
    }

    public void setEndtime(Long endtime) {
        this.endtime = endtime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBEventCategory> getCategories() {
        if (categories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBEventCategoryDao targetDao = daoSession.getDBEventCategoryDao();
            List<DBEventCategory> categoriesNew = targetDao._queryDBEvent_Categories(id);
            synchronized (this) {
                if(categories == null) {
                    categories = categoriesNew;
                }
            }
        }
        return categories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCategories() {
        categories = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
