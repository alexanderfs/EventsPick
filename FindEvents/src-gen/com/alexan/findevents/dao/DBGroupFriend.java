package com.alexan.findevents.dao;

import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBGROUP_FRIEND.
 */
public class DBGroupFriend {

    private Long id;
    private long groupID;
    private long friendID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBGroupFriendDao myDao;

    private DBPerson friends;
    private Long friends__resolvedKey;

    private DBGroup groups;
    private Long groups__resolvedKey;


    public DBGroupFriend() {
    }

    public DBGroupFriend(Long id) {
        this.id = id;
    }

    public DBGroupFriend(Long id, long groupID, long friendID) {
        this.id = id;
        this.groupID = groupID;
        this.friendID = friendID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBGroupFriendDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getGroupID() {
        return groupID;
    }

    public void setGroupID(long groupID) {
        this.groupID = groupID;
    }

    public long getFriendID() {
        return friendID;
    }

    public void setFriendID(long friendID) {
        this.friendID = friendID;
    }

    /** To-one relationship, resolved on first access. */
    public DBPerson getFriends() {
        long __key = this.friendID;
        if (friends__resolvedKey == null || !friends__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBPersonDao targetDao = daoSession.getDBPersonDao();
            DBPerson friendsNew = targetDao.load(__key);
            synchronized (this) {
                friends = friendsNew;
            	friends__resolvedKey = __key;
            }
        }
        return friends;
    }

    public void setFriends(DBPerson friends) {
        if (friends == null) {
            throw new DaoException("To-one property 'friendID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.friends = friends;
            friendID = friends.getId();
            friends__resolvedKey = friendID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public DBGroup getGroups() {
        long __key = this.groupID;
        if (groups__resolvedKey == null || !groups__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBGroupDao targetDao = daoSession.getDBGroupDao();
            DBGroup groupsNew = targetDao.load(__key);
            synchronized (this) {
                groups = groupsNew;
            	groups__resolvedKey = __key;
            }
        }
        return groups;
    }

    public void setGroups(DBGroup groups) {
        if (groups == null) {
            throw new DaoException("To-one property 'groupID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.groups = groups;
            groupID = groups.getId();
            groups__resolvedKey = groupID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
