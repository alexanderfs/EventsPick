package com.alexan.findevents.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alexan.findevents.dao.DBPickEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBPICK_EVENT.
*/
public class DBPickEventDao extends AbstractDao<DBPickEvent, Long> {

    public static final String TABLENAME = "DBPICK_EVENT";

    /**
     * Properties of entity DBPickEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "userID", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(6, String.class, "city", false, "CITY");
        public final static Property Addressdetail = new Property(7, String.class, "addressdetail", false, "ADDRESSDETAIL");
        public final static Property Photo = new Property(8, String.class, "photo", false, "PHOTO");
        public final static Property Startt = new Property(9, String.class, "startt", false, "STARTT");
        public final static Property Endt = new Property(10, String.class, "endt", false, "ENDT");
        public final static Property Startd = new Property(11, String.class, "startd", false, "STARTD");
        public final static Property Endd = new Property(12, String.class, "endd", false, "ENDD");
        public final static Property CollectionNum = new Property(13, Integer.class, "collectionNum", false, "COLLECTION_NUM");
        public final static Property AttendNum = new Property(14, Integer.class, "attendNum", false, "ATTEND_NUM");
        public final static Property CommentNum = new Property(15, Integer.class, "commentNum", false, "COMMENT_NUM");
        public final static Property Catagory = new Property(16, String.class, "catagory", false, "CATAGORY");
    };


    public DBPickEventDao(DaoConfig config) {
        super(config);
    }
    
    public DBPickEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBPICK_EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' INTEGER," + // 1: userID
                "'TITLE' TEXT," + // 2: title
                "'DESCRIPTION' TEXT," + // 3: description
                "'ADDRESS' TEXT," + // 4: address
                "'PROVINCE' TEXT," + // 5: province
                "'CITY' TEXT," + // 6: city
                "'ADDRESSDETAIL' TEXT," + // 7: addressdetail
                "'PHOTO' TEXT," + // 8: photo
                "'STARTT' TEXT," + // 9: startt
                "'ENDT' TEXT," + // 10: endt
                "'STARTD' TEXT," + // 11: startd
                "'ENDD' TEXT," + // 12: endd
                "'COLLECTION_NUM' INTEGER," + // 13: collectionNum
                "'ATTEND_NUM' INTEGER," + // 14: attendNum
                "'COMMENT_NUM' INTEGER," + // 15: commentNum
                "'CATAGORY' TEXT);"); // 16: catagory
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBPICK_EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBPickEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(2, userID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String addressdetail = entity.getAddressdetail();
        if (addressdetail != null) {
            stmt.bindString(8, addressdetail);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
 
        String startt = entity.getStartt();
        if (startt != null) {
            stmt.bindString(10, startt);
        }
 
        String endt = entity.getEndt();
        if (endt != null) {
            stmt.bindString(11, endt);
        }
 
        String startd = entity.getStartd();
        if (startd != null) {
            stmt.bindString(12, startd);
        }
 
        String endd = entity.getEndd();
        if (endd != null) {
            stmt.bindString(13, endd);
        }
 
        Integer collectionNum = entity.getCollectionNum();
        if (collectionNum != null) {
            stmt.bindLong(14, collectionNum);
        }
 
        Integer attendNum = entity.getAttendNum();
        if (attendNum != null) {
            stmt.bindLong(15, attendNum);
        }
 
        Integer commentNum = entity.getCommentNum();
        if (commentNum != null) {
            stmt.bindLong(16, commentNum);
        }
 
        String catagory = entity.getCatagory();
        if (catagory != null) {
            stmt.bindString(17, catagory);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBPickEvent readEntity(Cursor cursor, int offset) {
        DBPickEvent entity = new DBPickEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // addressdetail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // startt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // endt
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // startd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // endd
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // collectionNum
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // attendNum
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // commentNum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // catagory
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBPickEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddressdetail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStartt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEndt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStartd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEndd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCollectionNum(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setAttendNum(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCommentNum(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCatagory(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBPickEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBPickEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
