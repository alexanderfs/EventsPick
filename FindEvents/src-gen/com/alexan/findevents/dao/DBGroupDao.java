package com.alexan.findevents.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alexan.findevents.dao.DBGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBGROUP.
*/
public class DBGroupDao extends AbstractDao<DBGroup, Long> {

    public static final String TABLENAME = "DBGROUP";

    /**
     * Properties of entity DBGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, Long.class, "userID", false, "USER_ID");
        public final static Property Groupname = new Property(2, String.class, "groupname", false, "GROUPNAME");
        public final static Property Groupcapacity = new Property(3, Integer.class, "groupcapacity", false, "GROUPCAPACITY");
        public final static Property Timestamp = new Property(4, Long.class, "timestamp", false, "TIMESTAMP");
    };

    private DaoSession daoSession;


    public DBGroupDao(DaoConfig config) {
        super(config);
    }
    
    public DBGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBGROUP' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' INTEGER," + // 1: userID
                "'GROUPNAME' TEXT," + // 2: groupname
                "'GROUPCAPACITY' INTEGER," + // 3: groupcapacity
                "'TIMESTAMP' INTEGER);"); // 4: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBGROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(2, userID);
        }
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(3, groupname);
        }
 
        Integer groupcapacity = entity.getGroupcapacity();
        if (groupcapacity != null) {
            stmt.bindLong(4, groupcapacity);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
    }

    @Override
    protected void attachEntity(DBGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBGroup readEntity(Cursor cursor, int offset) {
        DBGroup entity = new DBGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupname
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // groupcapacity
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBGroup entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGroupname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupcapacity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimestamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBGroup entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBGroup entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
