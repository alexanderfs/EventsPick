package com.alexan.findevents.dao;

import java.util.List;
import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBPERSON.
 */
public class DBPerson {

    private Long id;
    private String phoneNumber;
    private String emailAddr;
    private String nickname;
    private Long locationID;
    private Boolean gender;
    private String signature;
    private Long icon;
    private Long timestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBPersonDao myDao;

    private List<DBFriend> whosefriend;
    private List<DBGroupFriend> thegroups;

    public DBPerson() {
    }

    public DBPerson(Long id) {
        this.id = id;
    }

    public DBPerson(Long id, String phoneNumber, String emailAddr, String nickname, Long locationID, Boolean gender, String signature, Long icon, Long timestamp) {
        this.id = id;
        this.phoneNumber = phoneNumber;
        this.emailAddr = emailAddr;
        this.nickname = nickname;
        this.locationID = locationID;
        this.gender = gender;
        this.signature = signature;
        this.icon = icon;
        this.timestamp = timestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBPersonDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmailAddr() {
        return emailAddr;
    }

    public void setEmailAddr(String emailAddr) {
        this.emailAddr = emailAddr;
    }

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public Long getLocationID() {
        return locationID;
    }

    public void setLocationID(Long locationID) {
        this.locationID = locationID;
    }

    public Boolean getGender() {
        return gender;
    }

    public void setGender(Boolean gender) {
        this.gender = gender;
    }

    public String getSignature() {
        return signature;
    }

    public void setSignature(String signature) {
        this.signature = signature;
    }

    public Long getIcon() {
        return icon;
    }

    public void setIcon(Long icon) {
        this.icon = icon;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBFriend> getWhosefriend() {
        if (whosefriend == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBFriendDao targetDao = daoSession.getDBFriendDao();
            List<DBFriend> whosefriendNew = targetDao._queryDBPerson_Whosefriend(id);
            synchronized (this) {
                if(whosefriend == null) {
                    whosefriend = whosefriendNew;
                }
            }
        }
        return whosefriend;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWhosefriend() {
        whosefriend = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBGroupFriend> getThegroups() {
        if (thegroups == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBGroupFriendDao targetDao = daoSession.getDBGroupFriendDao();
            List<DBGroupFriend> thegroupsNew = targetDao._queryDBPerson_Thegroups(id);
            synchronized (this) {
                if(thegroups == null) {
                    thegroups = thegroupsNew;
                }
            }
        }
        return thegroups;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetThegroups() {
        thegroups = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
