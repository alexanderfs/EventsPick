package com.alexan.findevents.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alexan.findevents.dao.DBPerson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBPERSON.
*/
public class DBPersonDao extends AbstractDao<DBPerson, Long> {

    public static final String TABLENAME = "DBPERSON";

    /**
     * Properties of entity DBPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNumber = new Property(1, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property EmailAddr = new Property(2, String.class, "emailAddr", false, "EMAIL_ADDR");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property LocationID = new Property(4, Long.class, "locationID", false, "LOCATION_ID");
        public final static Property Gender = new Property(5, Boolean.class, "gender", false, "GENDER");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
        public final static Property Icon = new Property(7, Long.class, "icon", false, "ICON");
        public final static Property Timestamp = new Property(8, Long.class, "timestamp", false, "TIMESTAMP");
    };

    private DaoSession daoSession;


    public DBPersonDao(DaoConfig config) {
        super(config);
    }
    
    public DBPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBPERSON' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHONE_NUMBER' TEXT," + // 1: phoneNumber
                "'EMAIL_ADDR' TEXT," + // 2: emailAddr
                "'NICKNAME' TEXT," + // 3: nickname
                "'LOCATION_ID' INTEGER," + // 4: locationID
                "'GENDER' INTEGER," + // 5: gender
                "'SIGNATURE' TEXT," + // 6: signature
                "'ICON' INTEGER," + // 7: icon
                "'TIMESTAMP' INTEGER);"); // 8: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBPERSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String emailAddr = entity.getEmailAddr();
        if (emailAddr != null) {
            stmt.bindString(3, emailAddr);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        Long locationID = entity.getLocationID();
        if (locationID != null) {
            stmt.bindLong(5, locationID);
        }
 
        Boolean gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender ? 1l: 0l);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        Long icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(8, icon);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(9, timestamp);
        }
    }

    @Override
    protected void attachEntity(DBPerson entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBPerson readEntity(Cursor cursor, int offset) {
        DBPerson entity = new DBPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emailAddr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // locationID
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signature
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // icon
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBPerson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmailAddr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocationID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIcon(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setTimestamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBPerson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBPerson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
